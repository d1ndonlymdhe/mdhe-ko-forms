import type { NextPage } from "next";
import Head from "next/head";
import { useEffect, useRef, useState } from "react";
import { trpc } from "../utils/trpc";
import Input from "../components/Input"
import Button from "../components/Button";
import Error from "../components/Error"
import Cookies from "js-cookie"
const Home: NextPage = () => {

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex min-h-screen flex-col items-center justify-center p-4">
        <h1 className="text-5xl font-extrabold leading-normal text-gray-700 md:text-[5rem]">
          Mdhe <span className="text-purple-300">Ko</span> Forms
        </h1>
        <AuthComponent isSignedIn={false} ></AuthComponent>
      </main>
    </>
  );
};

type AuthComponentProps = {
  isSignedIn: boolean
}



function AuthComponent(props: AuthComponentProps) {
  const [currentForm, setCurrentForm] = useState("login");
  return <div className="grid grid-rows-[9fr_1fr] justify-items-center">
    <div>
      {currentForm == "login" && <LoginForm></LoginForm>}
      {currentForm == "signup" && <SignupForm></SignupForm>}
    </div>
    <div>
      <Button className="bg-blue-400 mt-2" onClick={() => { setCurrentForm(currentForm == "login" ? "signup" : "login") }}>{currentForm == "login" ? "No Account? Sign Up" : "Already Have an Account? Login"}</Button>
    </div>
  </div>
}

function SignupForm() {
  const usernameRef = useRef<HTMLInputElement>(null)
  const passwordRef = useRef<HTMLInputElement>(null)
  const confirmPasswordRef = useRef<HTMLInputElement>(null)
  return <div className="border-2 border-solid border-gray-300 p-5 rounded-lg">
    <form className="grid grid-rows-5">
      <label htmlFor="username">Username:</label>
      <Input name="username" id="username" type="text" ref={usernameRef}></Input>
      <label htmlFor="password">Password:</label>
      <Input name="password" id="password" type="password" ref={passwordRef} minLength={8}></Input>
      <label htmlFor="confirmPassword">Confirm Password:</label>
      <Input name="confirmPassword" id="confirmPassword" type="password" ref={confirmPasswordRef} minLength={8}></Input>
      <Button type="submit" className="mt-2">Sign Up</Button>
    </form>
  </div>
}


function LoginForm() {
  const usernameRef = useRef<HTMLInputElement>(null)
  const passwordRef = useRef<HTMLInputElement>(null)
  const [error, setError] = useState("");
  const loginMutaion = trpc.auth.logIn.useMutation()
  useEffect(() => {
    if (loginMutaion.isSuccess) {
      const response = loginMutaion.data;
      if (response.status == "success") {
        console.log("Loggging in");
        console.log("Token = ", response.message)
        Cookies.set("token", response.message)
      } else {
        console.log("error");
        console.log("Error = ", response.message)
        if (response.message == "NO_USER") {
          setError("No Account Found")
        } else if (response.message == "WRONG_PASSWORD") {
          setError("Wrong Password try again");
          if (passwordRef.current) {
            passwordRef.current.value = ""
          }
        } else {
          setError("Unknown Error Occured")
        }
      }
    } else if (loginMutaion.isError) {
      setError("Cannot connect to the server")
    }
  }, [loginMutaion])
  const handleLogin = () => {
    console.log("Handling login")
    if (usernameRef && passwordRef) {
      const username = usernameRef.current?.value
      const password = passwordRef.current?.value
      console.log(username, password)
      if (username && username !== "" && password && password != "") {
        loginMutaion.mutate({ username, password })
      }
    }
  }
  return <>
    <div className="border-2 border-solid border-gray-300 p-5 rounded-lg">
      <form name="loginForm" onSubmit={(e) => {
        e.preventDefault()
        handleLogin()
      }} className={`grid ${(error !== "") ? "grid-rows-6" : "grid-rows-5"}`}>
        {error !== "" && <Error>{error}</Error>}
        <label htmlFor="username">
          Username:
        </label>
        <Input name="username" type="text" id="username" ref={usernameRef} required={true}></Input>
        <label htmlFor="password">
          Password:
        </label>
        <Input name="password" id="password" type={"password"} minLength={8} ref={passwordRef} required={true}></Input>
        <Button id="submit" type="submit" className={`mt-2 ${loginMutaion.isLoading ? "bg-orange-300" : ""}`}>{loginMutaion.isLoading ? "Loading" : "Login"}</Button>
      </form>
    </div>
  </>
}



export default Home;

type TechnologyCardProps = {
  name: string;
  description: string;
  documentation: string;
};

const TechnologyCard = ({
  name,
  description,
  documentation,
}: TechnologyCardProps) => {
  return (
    <section className="flex flex-col justify-center rounded border-2 border-gray-500 p-6 shadow-xl duration-500 motion-safe:hover:scale-105">
      <h2 className="text-lg text-gray-700">{name}</h2>
      <p className="text-sm text-gray-600">{description}</p>
      <a
        className="m-auto mt-3 w-fit text-sm text-violet-500 underline decoration-dotted underline-offset-2"
        href={documentation}
        target="_blank"
        rel="noreferrer"
      >
        Documentation
      </a>
    </section>
  );
};
